###############################################
#   OpenTopoMap
#   (c) 2012-2018 Stefan Erhardt
#   https://github.com/der-stefan/OpenTopoMap
#
#   opentopomap.org
#
###############################################


HOWTO create a DEM for contours and hillshade
=============================================


# Install needed packages
	sudo apt-get install gdal-bin python-gdal


# Download all SRTM tiles you need (for example from viewfinderpanoramas.org), for example with the help of http://www.imagico.de/map/demsearch.php
	wget -i list.txt


# Unpack all zip files
	for zipfile in *.zip;do unzip -j -o "$zipfile" -d unpacked; done


# Fill all voids
	for hgtfile in *.hgt;do gdal_fillnodata.py $hgtfile $hgtfile.tif; done


# Merge all .tifs into one huge tif. This file will is the raw DEM with full resolution and the start for any further steps.
# don't delete raw.tif after these steps, you may use it for estimation of saddle directions
	gdal_merge.py -n 32767 -co BIGTIFF=YES -co TILED=YES -co COMPRESS=LZW -co PREDICTOR=2 -o ../../raw.tif *.hgt.tif


# Convert the raw file into Mercator projection, interpolate and shrink
	gdalwarp -co BIGTIFF=YES -co TILED=YES -co COMPRESS=LZW -co PREDICTOR=2 -t_srs "+proj=merc +ellps=sphere +R=6378137 +a=6378137 +units=m" -r bilinear -tr 1000 1000 raw.tif warp-1000.tif

	Parameters:
		-co BIGTIFF=YES: if output > 4 GB
		-co TILED=YES: intern tiles
		-co COMPRESS=LZW -co PREDICTOR=2: lossless compression with prediction
		-t_srs "+proj=merc +ellps=sphere +R=6378137 +a=6378137 +units=m": convertion into Mercator
		-r cubicspline: interpolation for tr < 90 m
		   bilinear: for tr > 90 m
		-tr 30 30: desired resolution in meter


# Create color relief for different zoom levels
	gdaldem color-relief -co COMPRESS=LZW -co PREDICTOR=2 -alpha warp-5000.tif relief.txt relief-5000.tif
	gdaldem color-relief -co COMPRESS=LZW -co PREDICTOR=2 -alpha warp-500.tif relief.txt relief-500.tif


# Create hillshade for different zoom levels
# Note: gdaldem and gdalwarp have problems compressing huge files while generation. You can compress those afterwards by gdal_translate -co compress=...
	gdaldem hillshade -z 7 -compute_edges -co COMPRESS=JPEG warp-5000.tif hillshade-5000.tif
	gdaldem hillshade -z 7 -compute_edges -co BIGTIFF=YES -co TILED=YES -co COMPRESS=JPEG warp-1000.tif hillshade-1000.tif
	gdaldem hillshade -z 4 -compute_edges -co BIGTIFF=YES -co TILED=YES -co COMPRESS=JPEG warp-700.tif hillshade-700.tif
	gdaldem hillshade -z 2 -co compress=lzw -co predictor=2 -co bigtiff=yes -compute_edges warp-90.tif hillshade-90.tif && gdal_translate -co compress=JPEG -co bigtiff=yes -co tiled=yes hillshade-90.tif hillshade-90-jpeg.tif


# Create contour lines
	# Install phyghtmap: sudo apt-get install python-setuptools python-matplotlib python-beautifulsoup python-numpy
	# wget http://katze.tfiu.de/projects/phyghtmap/phyghtmap_1.71.orig.tar.gz (or newer)
	# sudo python setup.py install
	phyghtmap --max-nodes-per-tile=0 -s 10 -0 --pbf warp-90.tif


# Create contours database
    createdb contours
    sudo -u postgres psql -d contours -c 'CREATE EXTENSION postgis;'
	

# Load contour file into database
	screen osm2pgsql --slim -d contours -C 12000 --number-processes 10 --style ~/OpenTopoMap/mapnik/osm2pgsql/contours.style contours.pbf





# Propably not necessary any more:
#    sudo -u postgres psql -d contours -c 'GRANT SELECT ON ALL TABLES IN SCHEMA public TO tirex;'
#    sudo -u postgres psql -d contours -c 'GRANT CONNECT ON DATABASE contours TO tirex;'
#
#    # create a geohash index if you have enough disk space:
#    psql -d contours -c "CREATE INDEX contours_geohash ON contours (ST_GeoHash(ST_Transform(way,4326)));"

